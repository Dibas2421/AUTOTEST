llm_page_analysis:
  system: "You are a web page analyst. Extract structural and functional metadata from HTML."
  user: |
    Analyze this web page structure and return JSON metadata:
    {{
        "auth_requirements": {{
            "auth_required": boolean,
            "auth_type": "login|registration|none",
            "auth_fields": [
                {{
                    "name": "username", 
                    "type": "email|text|password",
                    "required": boolean
                }}
            ]
        }},
        "contact_form_fields": [
            {{
                "name": "first name",
                "type": "text",
                "required": true
            }},
            {{
                "name": "last name",
                "type": "text",
                "required": true
            }},
            {{
                "name": "message",
                "type": "text",
                "required": true
            }},
            {{
                "name": "email",
                "type": "email",
                "required": true
            }}
        ],
        "main_content": "Brief description of main content areas",
        "key_actions": ["list of primary user actions"],
        "content_hierarchy": {{
            "primary_sections": ["section1", "section2"],
            "subsections": ["subsection1", "subsection2"]
        }},
        "interactive_patterns": {{
            "forms": ["login", "search"],
            "dynamic_elements": ["live_search", "infinite_scroll"]
        }},
        "security_indicators": ["https", "captcha"]
    }}
    
    Current page HTML:
    {page_source}
    
    Focus on:
    - Semantic HTML structure
    - User interaction patterns
    - Content organization
    - Security features

generate_tests:
  system: |
    You are a senior QA engineer. Output MUST be valid JSON format as specified. Create specific test cases based on actual page elements and structure.
    Generate comprehensive test cases covering both regular functionality and authentication flows when present.
    Generate test cases using actual authentication test data only when needed and available.
    Ensure valid JSON output.
  user: |
    Generate test cases in VALID JSON format with specific actual current page elements.
    Generate comprehensive test cases including both regular and authentication tests.
    Output ONLY valid JSON using this EXACT structure:
    {{
        "test_cases": [
            {{
                "name": "Test name",
                "type": "functional|auth-positive|auth-negative",
                "steps": ["step1", "step2"],
                "selectors": {{
                    "element1": "css_selector",
                    "element2": "xpath"
                }},
                "validation": "Expected outcome",
                "test_data": {{
                    "field_name": "specific_value"
                }}
            }}
        ]
    }}
    
    Current page elements (Page Structure Metadata):
    {page_metadata}
    
    {prompt_suffix}
    
    Use selectors from this page structure:
    {{
        "title": "{title}",
        "forms": {forms},
        "buttons": {buttons}
    }}
    
    Current page URL: {url}
    Current Page HTML: {page_source}
    
    Guidelines:
    1. Create tests SPECIFIC to these page elements
    2. Functional tests for core page elements
    3. Cover functional, UI consistency checks, and security aspects
    4. Prioritize main user flows
    5. Include edge cases for observed input types
    6. Include both positive and negative test cases to test functionality
    
    Focus on:
    - Form validation rules
    - Navigation consistency
    - Data presentation integrity
    - Interactive element functionality
    - Security considerations
    
    Rules:
    1. Never add comments or explanations
    2. Validate JSON before responding
    3. Use actual selectors from page metadata
    4. For auth tests (if applicable), reference EXACT values from provided test data
    5. Auth tests (if auth required):
        - Valid credential submission
        - Invalid format tests
        - Missing required fields
        - Security validations
    6. Include both positive and negative cases
    
    Return test cases in specified valid JSON format with Selenium selectors.

generate_script:
  system: |
    You are a senior Selenium automation engineer specializing in creating robust, reliable test scripts for Selenium 4.15.2. Generate executable Selenium code using provided selectors. Output ONLY valid Python code in markdown blocks. You write code that:
        - Uses best practices for element selection
        - Uses the correct WebDriver initialization pattern for Selenium 4.15.2
        - Waits for all JavaScript and AJAX on the page to load before starting any test steps
        - For CAPTCHA-protected pages:
            - Detect CAPTCHA elements using common selectors
            - Pause execution for manual solving when CAPTCHA is present
            - Add clear console instructions for user intervention
        - Implements proper waits and synchronization
        - Handles errors gracefully with retries
        - Includes detailed logging and reporting
        - Is specific to the website being tested, not generic
  user: |
    Generate Python Selenium script for the following test cases:
    {test_case}
    
    Page Structure:
    {page_metadata}
    
    Current page HTML:
    {page_source}
    
    Use reliable selectors from page structure.
    IMPORTANT - Use EXACTLY this WebDriver setup for Selenium 4.15.2:
    ```
    from selenium import webdriver
    from selenium.webdriver.chrome.service import Service
    from webdriver_manager.chrome import ChromeDriverManager
    
    # This is the correct way to initialize Chrome in Selenium 4.15.2
    service = Service(ChromeDriverManager().install())
    driver = webdriver.Chrome(service=service)
    ```
    
    DO NOT use: webdriver.Chrome(ChromeDriverManager().install()) directly as it will cause errors
    
    **Before starting any test steps, wait for all JavaScript and AJAX on the page to finish loading.**
    - Use a robust method such as:
        - Waiting for `document.readyState == 'complete'`
        - Waiting for jQuery/AJAX activity to finish if present
    
    Include CAPTCHA handling when present:
        1. Security Features: {security_indicators}
        2. Check for common CAPTCHA selectors (#captcha, .g-recaptcha, etc.)
        3. If CAPTCHA detected:
            - Print clear instructions for manual solving
            - Pause execution for 2 minutes (120 seconds)
            - Add timeout exception handling
    
    Return ONLY executable Python code in markdown format.
    Return ONLY CODE in markdown blocks. No explanations.

requires_auth:
  system: "You are an authentication detector. Return JSON with 'requires_auth' boolean."
  user: |
    Analyze this HTML page and respond ONLY with JSON:
    {{ "requires_auth": boolean }}
    Does this page contain login/registration forms or auth requirements?
    Page URL: {url}
    Partial HTML: {page_html}

auth_form_selectors:
  system: "You are a web form analyzer. Return JSON with auth form selectors and field types."
  user: |
    Extract auth form selectors as JSON:
    {{
        "username_selector": "css_selector",
        "password_selector": "css_selector",
        "submit_selector": "css_selector",
        "auth_type": "login|registration",
        "additional_fields": {{
            "field_name": {{
                "selector": "css_selector",
                "type": "text|email|tel|date"
            }}
        }}
    }}
    Current page HTML: {page_html}

