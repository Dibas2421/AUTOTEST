2025-05-07 12:09:36,860 - INFO - Analyzing https://practicetestautomation.com/practice-test-login/ page...
2025-05-07 12:09:37,149 - DEBUG - Static page metadata: {'title': 'Test Login | Practice Test Automation', 'url': 'https://practicetestautomation.com/practice-test-login/', 'forms': [], 'buttons': [{'tag': 'a', 'text': '', 'id': '', 'type': ''}, {'tag': 'a', 'text': '', 'id': '', 'type': ''}, {'tag': 'button', 'text': '', 'id': '', 'type': 'submit'}, {'tag': 'a', 'text': 'HOME', 'id': '', 'type': ''}, {'tag': 'a', 'text': 'PRACTICE', 'id': '', 'type': ''}, {'tag': 'a', 'text': 'COURSES', 'id': '', 'type': ''}, {'tag': 'a', 'text': 'BLOG', 'id': '', 'type': ''}, {'tag': 'a', 'text': 'CONTACT', 'id': '', 'type': ''}, {'tag': 'button', 'text': '', 'id': 'toggle-navigation', 'type': 'submit'}, {'tag': 'input', 'text': '', 'id': 'username', 'type': 'text'}, {'tag': 'input', 'text': '', 'id': 'password', 'type': 'password'}, {'tag': 'button', 'text': 'Submit', 'id': 'submit', 'type': 'submit'}, {'tag': 'a', 'text': 'Practice Test Automation.', 'id': '', 'type': ''}, {'tag': 'a', 'text': 'Privacy Policy', 'id': '', 'type': ''}], 'tables': [], 'key_flows': {'main_navigation': ['https://practicetestautomation.com/', 'https://practicetestautomation.com/practice/', 'https://practicetestautomation.com/courses/', 'https://practicetestautomation.com/blog/', 'https://practicetestautomation.com/contact/'], 'primary_actions': []}}
2025-05-07 12:09:43,365 - INFO - LLM analysis of current page completed
2025-05-07 12:09:43,365 - DEBUG - Raw LLM response: ```json
{
    "auth_requirements": {
        "auth_required": true,
        "auth_type": "login",
        "auth_fields": [
            {
                "name": "username",
                "type": "text",
                "required": true
            },
            {
                "name": "password",
                "type": "password",
                "required": true
            }
        ]
    },
    "main_content": "This page provides a simple login form for students to practice writing positive and negative login test cases. It includes test case instructions and error handling for incorrect credentials.",
    "key_actions": [
        "Enter username",
        "Enter password",
        "Click Submit button",
        "Handle error messages",
        "Redirect to success page on valid login"
    ],
    "content_hierarchy": {
        "primary_sections": [
            "Header",
            "Main Content",
            "Footer"
        ],
        "subsections": [
            "Login Form",
            "Test Instructions",
            "Error Messages"
        ]
    },
    "interactive_patterns": {
        "forms": [
            "login"
        ],
        "dynamic_elements": [
            "error message display",
            "redirect on successful login"
        ]
    },
    "security_indicators": [
        "https",
        "error handling for invalid credentials"
    ]
}
```
2025-05-07 12:09:43,366 - DEBUG - Sanitized LLM response: {
    "auth_requirements": {
        "auth_required": true,
        "auth_type": "login",
        "auth_fields": [
            {
                "name": "username",
                "type": "text",
                "required": true
            },
            {
                "name": "password",
                "type": "password",
                "required": true
            }
        ]
    },
    "main_content": "This page provides a simple login form for students to practice writing positive and negative login test cases. It includes test case instructions and error handling for incorrect credentials.",
    "key_actions": [
        "Enter username",
        "Enter password",
        "Click Submit button",
        "Handle error messages",
        "Redirect to success page on valid login"
    ],
    "content_hierarchy": {
        "primary_sections": [
            "Header",
            "Main Content",
            "Footer"
        ],
        "subsections": [
            "Login Form",
            "Test Instructions",
            "Error Messages"
        ]
    },
    "interactive_patterns": {
        "forms": [
            "login"
        ],
        "dynamic_elements": [
            "error message display",
            "redirect on successful login"
        ]
    },
    "security_indicators": [
        "https",
        "error handling for invalid credentials"
    ]
}
2025-05-07 12:09:43,366 - DEBUG - LLM Analysed page metadata: {'auth_requirements': {'auth_required': True, 'auth_type': 'login', 'auth_fields': [{'name': 'username', 'type': 'text', 'required': True}, {'name': 'password', 'type': 'password', 'required': True}]}, 'main_content': 'This page provides a simple login form for students to practice writing positive and negative login test cases. It includes test case instructions and error handling for incorrect credentials.', 'key_actions': ['Enter username', 'Enter password', 'Click Submit button', 'Handle error messages', 'Redirect to success page on valid login'], 'content_hierarchy': {'primary_sections': ['Header', 'Main Content', 'Footer'], 'subsections': ['Login Form', 'Test Instructions', 'Error Messages']}, 'interactive_patterns': {'forms': ['login'], 'dynamic_elements': ['error message display', 'redirect on successful login']}, 'security_indicators': ['https', 'error handling for invalid credentials']}
2025-05-07 12:09:43,366 - DEBUG - Combined page metadata: {'title': 'Test Login | Practice Test Automation', 'url': 'https://practicetestautomation.com/practice-test-login/', 'forms': [], 'buttons': [{'tag': 'a', 'text': '', 'id': '', 'type': ''}, {'tag': 'a', 'text': '', 'id': '', 'type': ''}, {'tag': 'button', 'text': '', 'id': '', 'type': 'submit'}, {'tag': 'a', 'text': 'HOME', 'id': '', 'type': ''}, {'tag': 'a', 'text': 'PRACTICE', 'id': '', 'type': ''}, {'tag': 'a', 'text': 'COURSES', 'id': '', 'type': ''}, {'tag': 'a', 'text': 'BLOG', 'id': '', 'type': ''}, {'tag': 'a', 'text': 'CONTACT', 'id': '', 'type': ''}, {'tag': 'button', 'text': '', 'id': 'toggle-navigation', 'type': 'submit'}, {'tag': 'input', 'text': '', 'id': 'username', 'type': 'text'}, {'tag': 'input', 'text': '', 'id': 'password', 'type': 'password'}, {'tag': 'button', 'text': 'Submit', 'id': 'submit', 'type': 'submit'}, {'tag': 'a', 'text': 'Practice Test Automation.', 'id': '', 'type': ''}, {'tag': 'a', 'text': 'Privacy Policy', 'id': '', 'type': ''}], 'tables': [], 'key_flows': {'main_navigation': ['https://practicetestautomation.com/', 'https://practicetestautomation.com/practice/', 'https://practicetestautomation.com/courses/', 'https://practicetestautomation.com/blog/', 'https://practicetestautomation.com/contact/'], 'primary_actions': []}, 'auth_requirements': {'auth_required': True, 'auth_type': 'login', 'auth_fields': [{'name': 'username', 'type': 'text', 'required': True}, {'name': 'password', 'type': 'password', 'required': True}]}, 'main_content': 'This page provides a simple login form for students to practice writing positive and negative login test cases. It includes test case instructions and error handling for incorrect credentials.', 'key_actions': ['Enter username', 'Enter password', 'Click Submit button', 'Handle error messages', 'Redirect to success page on valid login'], 'content_hierarchy': {'primary_sections': ['Header', 'Main Content', 'Footer'], 'subsections': ['Login Form', 'Test Instructions', 'Error Messages']}, 'interactive_patterns': {'forms': ['login'], 'dynamic_elements': ['error message display', 'redirect on successful login']}, 'security_indicators': ['https', 'error handling for invalid credentials']}
2025-05-07 12:09:43,369 - INFO - Sending request to LLM for test case generation...
2025-05-07 12:10:03,123 - DEBUG - Raw LLM response: ```json
{
    "test_cases": [
        {
            "name": "Verify successful login with valid credentials",
            "type": "auth-positive",
            "steps": [
                "Open the login page",
                "Enter 'student' into the Username field",
                "Enter 'Password123' into the Password field",
                "Click the Submit button",
                "Verify the URL contains 'practicetestautomation.com/logged-in-successfully/'",
                "Verify the page contains text 'Congratulations' or 'successfully logged in'",
                "Verify the 'Log out' button is displayed"
            ],
            "selectors": {
                "username_field": "#username",
                "password_field": "#password",
                "submit_button": "#submit",
                "error_message": "#error"
            },
            "validation": "User is redirected to the success page and sees the success message",
            "test_data": {
                "username": "student",
                "password": "Password123"
            }
        },
        {
            "name": "Verify error message for invalid username",
            "type": "auth-negative",
            "steps": [
                "Open the login page",
                "Enter 'invaliduser' into the Username field",
                "Enter 'Password123' into the Password field",
                "Click the Submit button",
                "Verify the error message is displayed",
                "Verify the error message text is 'Your username is invalid!'"
            ],
            "selectors": {
                "username_field": "#username",
                "password_field": "#password",
                "submit_button": "#submit",
                "error_message": "#error"
            },
            "validation": "Error message 'Your username is invalid!' is displayed",
            "test_data": {
                "username": "invaliduser",
                "password": "Password123"
            }
        },
        {
            "name": "Verify error message for invalid password",
            "type": "auth-negative",
            "steps": [
                "Open the login page",
                "Enter 'student' into the Username field",
                "Enter 'short' into the Password field",
                "Click the Submit button",
                "Verify the error message is displayed",
                "Verify the error message text is 'Your password is invalid!'"
            ],
            "selectors": {
                "username_field": "#username",
                "password_field": "#password",
                "submit_button": "#submit",
                "error_message": "#error"
            },
            "validation": "Error message 'Your password is invalid!' is displayed",
            "test_data": {
                "username": "student",
                "password": "short"
            }
        },
        {
            "name": "Verify error message when username is missing",
            "type": "auth-negative",
            "steps": [
                "Open the login page",
                "Leave the Username field empty",
                "Enter 'Password123' into the Password field",
                "Click the Submit button",
                "Verify the error message is displayed",
                "Verify the error message text is 'Your username is invalid!'"
            ],
            "selectors": {
                "username_field": "#username",
                "password_field": "#password",
                "submit_button": "#submit",
                "error_message": "#error"
            },
            "validation": "Error message 'Your username is invalid!' is displayed",
            "test_data": {
                "username": "",
                "password": "Password123"
            }
        },
        {
            "name": "Verify error message when password is missing",
            "type": "auth-negative",
            "steps": [
                "Open the login page",
                "Enter 'student' into the Username field",
                "Leave the Password field empty",
                "Click the Submit button",
                "Verify the error message is displayed",
                "Verify the error message text is 'Your password is invalid!'"
            ],
            "selectors": {
                "username_field": "#username",
                "password_field": "#password",
                "submit_button": "#submit",
                "error_message": "#error"
            },
            "validation": "Error message 'Your password is invalid!' is displayed",
            "test_data": {
                "username": "student",
                "password": ""
            }
        },
        {
            "name": "Verify navigation to home page from header",
            "type": "functional",
            "steps": [
                "Open the login page",
                "Click the 'HOME' link in the header",
                "Verify the URL is 'https://practicetestautomation.com/'"
            ],
            "selectors": {
                "home_link": "a[text='HOME']"
            },
            "validation": "User is redirected to the home page",
            "test_data": {}
        },
        {
            "name": "Verify navigation to practice page from header",
            "type": "functional",
            "steps": [
                "Open the login page",
                "Click the 'PRACTICE' link in the header",
                "Verify the URL is 'https://practicetestautomation.com/practice/'"
            ],
            "selectors": {
                "practice_link": "a[text='PRACTICE']"
            },
            "validation": "User is redirected to the practice page",
            "test_data": {}
        },
        {
            "name": "Verify error message reset after valid login",
            "type": "functional",
            "steps": [
                "Open the login page",
                "Enter 'invaliduser' into the Username field",
                "Enter 'Password123' into the Password field",
                "Click the Submit button",
                "Verify the error message is displayed",
                "Enter 'student' into the Username field",
                "Enter 'Password123' into the Password field",
                "Click the Submit button",
                "Verify the URL contains 'practicetestautomation.com/logged-in-successfully/'",
                "Verify the error message is not displayed"
            ],
            "selectors": {
                "username_field": "#username",
                "password_field": "#password",
                "submit_button": "#submit",
                "error_message": "#error"
            },
            "validation": "Error message is cleared after a successful login",
            "test_data": {
                "username": "student",
                "password": "Password123"
            }
        }
    ]
}
```
2025-05-07 12:10:03,123 - INFO - Received response from LLM
2025-05-07 12:10:03,123 - INFO - Successfully parsed 8 test cases
2025-05-07 12:10:03,124 - DEBUG - Test Case Details:
[
  {
    "name": "Verify successful login with valid credentials",
    "type": "auth-positive",
    "steps": [
      "Open the login page",
      "Enter 'student' into the Username field",
      "Enter 'Password123' into the Password field",
      "Click the Submit button",
      "Verify the URL contains 'practicetestautomation.com/logged-in-successfully/'",
      "Verify the page contains text 'Congratulations' or 'successfully logged in'",
      "Verify the 'Log out' button is displayed"
    ],
    "selectors": {
      "username_field": "#username",
      "password_field": "#password",
      "submit_button": "#submit",
      "error_message": "#error"
    },
    "validation": "User is redirected to the success page and sees the success message",
    "test_data": {
      "username": "student",
      "password": "Password123"
    }
  },
  {
    "name": "Verify error message for invalid username",
    "type": "auth-negative",
    "steps": [
      "Open the login page",
      "Enter 'invaliduser' into the Username field",
      "Enter 'Password123' into the Password field",
      "Click the Submit button",
      "Verify the error message is displayed",
      "Verify the error message text is 'Your username is invalid!'"
    ],
    "selectors": {
      "username_field": "#username",
      "password_field": "#password",
      "submit_button": "#submit",
      "error_message": "#error"
    },
    "validation": "Error message 'Your username is invalid!' is displayed",
    "test_data": {
      "username": "invaliduser",
      "password": "Password123"
    }
  },
  {
    "name": "Verify error message for invalid password",
    "type": "auth-negative",
    "steps": [
      "Open the login page",
      "Enter 'student' into the Username field",
      "Enter 'short' into the Password field",
      "Click the Submit button",
      "Verify the error message is displayed",
      "Verify the error message text is 'Your password is invalid!'"
    ],
    "selectors": {
      "username_field": "#username",
      "password_field": "#password",
      "submit_button": "#submit",
      "error_message": "#error"
    },
    "validation": "Error message 'Your password is invalid!' is displayed",
    "test_data": {
      "username": "student",
      "password": "short"
    }
  },
  {
    "name": "Verify error message when username is missing",
    "type": "auth-negative",
    "steps": [
      "Open the login page",
      "Leave the Username field empty",
      "Enter 'Password123' into the Password field",
      "Click the Submit button",
      "Verify the error message is displayed",
      "Verify the error message text is 'Your username is invalid!'"
    ],
    "selectors": {
      "username_field": "#username",
      "password_field": "#password",
      "submit_button": "#submit",
      "error_message": "#error"
    },
    "validation": "Error message 'Your username is invalid!' is displayed",
    "test_data": {
      "username": "",
      "password": "Password123"
    }
  },
  {
    "name": "Verify error message when password is missing",
    "type": "auth-negative",
    "steps": [
      "Open the login page",
      "Enter 'student' into the Username field",
      "Leave the Password field empty",
      "Click the Submit button",
      "Verify the error message is displayed",
      "Verify the error message text is 'Your password is invalid!'"
    ],
    "selectors": {
      "username_field": "#username",
      "password_field": "#password",
      "submit_button": "#submit",
      "error_message": "#error"
    },
    "validation": "Error message 'Your password is invalid!' is displayed",
    "test_data": {
      "username": "student",
      "password": ""
    }
  },
  {
    "name": "Verify navigation to home page from header",
    "type": "functional",
    "steps": [
      "Open the login page",
      "Click the 'HOME' link in the header",
      "Verify the URL is 'https://practicetestautomation.com/'"
    ],
    "selectors": {
      "home_link": "a[text='HOME']"
    },
    "validation": "User is redirected to the home page",
    "test_data": {}
  },
  {
    "name": "Verify navigation to practice page from header",
    "type": "functional",
    "steps": [
      "Open the login page",
      "Click the 'PRACTICE' link in the header",
      "Verify the URL is 'https://practicetestautomation.com/practice/'"
    ],
    "selectors": {
      "practice_link": "a[text='PRACTICE']"
    },
    "validation": "User is redirected to the practice page",
    "test_data": {}
  },
  {
    "name": "Verify error message reset after valid login",
    "type": "functional",
    "steps": [
      "Open the login page",
      "Enter 'invaliduser' into the Username field",
      "Enter 'Password123' into the Password field",
      "Click the Submit button",
      "Verify the error message is displayed",
      "Enter 'student' into the Username field",
      "Enter 'Password123' into the Password field",
      "Click the Submit button",
      "Verify the URL contains 'practicetestautomation.com/logged-in-successfully/'",
      "Verify the error message is not displayed"
    ],
    "selectors": {
      "username_field": "#username",
      "password_field": "#password",
      "submit_button": "#submit",
      "error_message": "#error"
    },
    "validation": "Error message is cleared after a successful login",
    "test_data": {
      "username": "student",
      "password": "Password123"
    }
  }
]
2025-05-07 12:10:18,073 - DEBUG - Raw LLM response generated code: ```python
import logging
import sys
import time

from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import (
    TimeoutException,
    NoSuchElementException,
    ElementClickInterceptedException,
    ElementNotInteractableException,
    WebDriverException,
)
from webdriver_manager.chrome import ChromeDriverManager

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)

LOGIN_URL = "https://practicetestautomation.com/practice-test-login/"
SUCCESS_URL_PART = "practicetestautomation.com/logged-in-successfully/"
USERNAME = "student"
PASSWORD = "Password123"

SELECTORS = {
    "username_field": (By.CSS_SELECTOR, "#username"),
    "password_field": (By.CSS_SELECTOR, "#password"),
    "submit_button": (By.CSS_SELECTOR, "#submit"),
    "error_message": (By.CSS_SELECTOR, "#error"),
}

SUCCESS_TEXTS = ["Congratulations", "successfully logged in"]
LOGOUT_BUTTON_XPATH = "//button[contains(translate(., 'LOGOUT', 'logout'), 'log out') or contains(., 'Log out') or contains(., 'LOG OUT')] | //a[contains(translate(., 'LOGOUT', 'logout'), 'log out') or contains(., 'Log out') or contains(., 'LOG OUT')]"

MAX_RETRIES = 2
WAIT_TIMEOUT = 10

def retry_on_exception(func):
    def wrapper(*args, **kwargs):
        last_exception = None
        for attempt in range(1, MAX_RETRIES + 1):
            try:
                return func(*args, **kwargs)
            except (TimeoutException, NoSuchElementException, ElementClickInterceptedException, ElementNotInteractableException, WebDriverException) as e:
                logging.warning(f"Attempt {attempt} failed: {e}")
                last_exception = e
                time.sleep(1)
        logging.error(f"All {MAX_RETRIES} attempts failed for {func.__name__}")
        raise last_exception
    return wrapper

@retry_on_exception
def open_login_page(driver):
    logging.info(f"Opening login page: {LOGIN_URL}")
    driver.get(LOGIN_URL)
    WebDriverWait(driver, WAIT_TIMEOUT).until(
        EC.presence_of_element_located(SELECTORS["username_field"])
    )
    logging.info("Login page loaded successfully.")

@retry_on_exception
def enter_username(driver, username):
    logging.info(f"Entering username: {username}")
    username_field = WebDriverWait(driver, WAIT_TIMEOUT).until(
        EC.visibility_of_element_located(SELECTORS["username_field"])
    )
    username_field.clear()
    username_field.send_keys(username)
    logging.info("Username entered.")

@retry_on_exception
def enter_password(driver, password):
    logging.info("Entering password.")
    password_field = WebDriverWait(driver, WAIT_TIMEOUT).until(
        EC.visibility_of_element_located(SELECTORS["password_field"])
    )
    password_field.clear()
    password_field.send_keys(password)
    logging.info("Password entered.")

@retry_on_exception
def click_submit(driver):
    logging.info("Clicking the Submit button.")
    submit_button = WebDriverWait(driver, WAIT_TIMEOUT).until(
        EC.element_to_be_clickable(SELECTORS["submit_button"])
    )
    submit_button.click()
    logging.info("Submit button clicked.")

def verify_url_contains(driver, expected_part):
    logging.info(f"Verifying URL contains '{expected_part}'")
    try:
        WebDriverWait(driver, WAIT_TIMEOUT).until(
            EC.url_contains(expected_part)
        )
        logging.info("URL verification passed.")
    except TimeoutException:
        logging.error(f"URL did not contain '{expected_part}'. Actual URL: {driver.current_url}")
        raise

def verify_success_text_present(driver):
    logging.info("Verifying success text is present on the page.")
    try:
        WebDriverWait(driver, WAIT_TIMEOUT).until(
            lambda d: any(text.lower() in d.page_source.lower() for text in SUCCESS_TEXTS)
        )
        logging.info("Success text found on the page.")
    except TimeoutException:
        logging.error("Success text not found on the page.")
        raise

def verify_logout_button_displayed(driver):
    logging.info("Verifying 'Log out' button is displayed.")
    try:
        logout_button = WebDriverWait(driver, WAIT_TIMEOUT).until(
            EC.visibility_of_element_located((By.XPATH, LOGOUT_BUTTON_XPATH))
        )
        if logout_button.is_displayed():
            logging.info("'Log out' button is displayed.")
        else:
            logging.error("'Log out' button is not displayed.")
            raise AssertionError("'Log out' button is not displayed.")
    except TimeoutException:
        logging.error("'Log out' button was not found on the page.")
        raise

def main():
    # WebDriver setup for Selenium 4.15.2
    service = Service(ChromeDriverManager().install())
    driver = webdriver.Chrome(service=service)
    driver.maximize_window()
    test_passed = False

    try:
        open_login_page(driver)
        enter_username(driver, USERNAME)
        enter_password(driver, PASSWORD)
        click_submit(driver)
        verify_url_contains(driver, SUCCESS_URL_PART)
        verify_success_text_present(driver)
        verify_logout_button_displayed(driver)
        logging.info("TEST PASSED: Successful login with valid credentials.")
        test_passed = True
    except Exception as e:
        logging.error(f"TEST FAILED: {e}")
    finally:
        driver.quit()
        if not test_passed:
            sys.exit(1)

if __name__ == "__main__":
    main()
```
2025-05-07 12:10:18,074 - INFO - Saved test script: test_scripts/test_20250507_121018_Verify_successful_login_with_valid_credentials.py
2025-05-07 12:10:30,055 - DEBUG - Raw LLM response generated code: ```python
import logging
import sys
import time

from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import (
    TimeoutException,
    NoSuchElementException,
    ElementClickInterceptedException,
    StaleElementReferenceException,
    WebDriverException,
)
from webdriver_manager.chrome import ChromeDriverManager

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)

LOGIN_URL = "https://practicetestautomation.com/practice-test-login/"
USERNAME = "invaliduser"
PASSWORD = "Password123"
EXPECTED_ERROR = "Your username is invalid!"

SELECTORS = {
    "username_field": "#username",
    "password_field": "#password",
    "submit_button": "#submit",
    "error_message": "#error"
}

MAX_RETRIES = 2
WAIT_TIMEOUT = 10

def retry_on_exception(func):
    def wrapper(*args, **kwargs):
        last_exception = None
        for attempt in range(1, MAX_RETRIES + 1):
            try:
                return func(*args, **kwargs)
            except (NoSuchElementException, ElementClickInterceptedException, StaleElementReferenceException, TimeoutException) as e:
                logging.warning(f"Attempt {attempt} failed: {e}")
                last_exception = e
                time.sleep(1)
        logging.error(f"All {MAX_RETRIES} attempts failed for {func.__name__}")
        raise last_exception
    return wrapper

@retry_on_exception
def wait_and_send_keys(driver, selector, value, timeout=WAIT_TIMEOUT):
    elem = WebDriverWait(driver, timeout).until(
        EC.visibility_of_element_located((By.CSS_SELECTOR, selector))
    )
    elem.clear()
    elem.send_keys(value)
    logging.info(f"Entered value into field '{selector}': {value}")

@retry_on_exception
def wait_and_click(driver, selector, timeout=WAIT_TIMEOUT):
    elem = WebDriverWait(driver, timeout).until(
        EC.element_to_be_clickable((By.CSS_SELECTOR, selector))
    )
    elem.click()
    logging.info(f"Clicked element '{selector}'")

@retry_on_exception
def wait_for_error_message(driver, selector, expected_text, timeout=WAIT_TIMEOUT):
    elem = WebDriverWait(driver, timeout).until(
        EC.visibility_of_element_located((By.CSS_SELECTOR, selector))
    )
    actual_text = elem.text.strip()
    logging.info(f"Error message displayed: '{actual_text}'")
    assert actual_text == expected_text, f"Expected error message '{expected_text}', got '{actual_text}'"
    logging.info("Error message text matches expected.")

def main():
    # WebDriver setup (Selenium 4.15.2)
    service = Service(ChromeDriverManager().install())
    driver = webdriver.Chrome(service=service)
    driver.maximize_window()
    test_passed = False

    try:
        logging.info("Opening login page...")
        driver.get(LOGIN_URL)

        # Step 1: Enter invalid username
        wait_and_send_keys(driver, SELECTORS["username_field"], USERNAME)

        # Step 2: Enter valid password
        wait_and_send_keys(driver, SELECTORS["password_field"], PASSWORD)

        # Step 3: Click Submit
        wait_and_click(driver, SELECTORS["submit_button"])

        # Step 4: Verify error message is displayed and correct
        wait_for_error_message(driver, SELECTORS["error_message"], EXPECTED_ERROR)

        logging.info("Test PASSED: Error message for invalid username is displayed and correct.")
        test_passed = True

    except AssertionError as ae:
        logging.error(f"Assertion failed: {ae}")
    except WebDriverException as we:
        logging.error(f"WebDriver error: {we}")
    except Exception as e:
        logging.error(f"Unexpected error: {e}")
    finally:
        driver.quit()
        if not test_passed:
            logging.info("Test FAILED.")
        else:
            logging.info("Test completed successfully.")

if __name__ == "__main__":
    main()
```
2025-05-07 12:10:30,056 - INFO - Saved test script: test_scripts/test_20250507_121030_Verify_error_message_for_invalid_username.py
2025-05-07 12:10:42,958 - DEBUG - Raw LLM response generated code: ```python
import logging
import sys
import time

from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import (
    TimeoutException,
    NoSuchElementException,
    ElementClickInterceptedException,
    StaleElementReferenceException,
    WebDriverException,
)
from webdriver_manager.chrome import ChromeDriverManager

# Logging setup
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)

LOGIN_URL = "https://practicetestautomation.com/practice-test-login/"
USERNAME = "student"
PASSWORD = "short"
EXPECTED_ERROR_TEXT = "Your password is invalid!"

SELECTORS = {
    "username_field": (By.CSS_SELECTOR, "#username"),
    "password_field": (By.CSS_SELECTOR, "#password"),
    "submit_button": (By.CSS_SELECTOR, "#submit"),
    "error_message": (By.CSS_SELECTOR, "#error"),
}

MAX_RETRIES = 2
WAIT_TIMEOUT = 10

def retry_on_exception(func):
    def wrapper(*args, **kwargs):
        last_exception = None
        for attempt in range(1, MAX_RETRIES + 2):
            try:
                return func(*args, **kwargs)
            except (NoSuchElementException, StaleElementReferenceException, ElementClickInterceptedException, TimeoutException, WebDriverException) as e:
                last_exception = e
                logging.warning(f"Attempt {attempt} failed with exception: {e}")
                if attempt <= MAX_RETRIES:
                    time.sleep(1)
                else:
                    logging.error(f"All {MAX_RETRIES + 1} attempts failed.")
                    raise
        raise last_exception
    return wrapper

@retry_on_exception
def open_login_page(driver):
    logging.info(f"Opening login page: {LOGIN_URL}")
    driver.get(LOGIN_URL)
    WebDriverWait(driver, WAIT_TIMEOUT).until(
        EC.presence_of_element_located(SELECTORS["username_field"])
    )
    logging.info("Login page loaded successfully.")

@retry_on_exception
def enter_username(driver, username):
    logging.info(f"Entering username: {username}")
    username_field = WebDriverWait(driver, WAIT_TIMEOUT).until(
        EC.visibility_of_element_located(SELECTORS["username_field"])
    )
    username_field.clear()
    username_field.send_keys(username)
    logging.info("Username entered.")

@retry_on_exception
def enter_password(driver, password):
    logging.info(f"Entering password: {password}")
    password_field = WebDriverWait(driver, WAIT_TIMEOUT).until(
        EC.visibility_of_element_located(SELECTORS["password_field"])
    )
    password_field.clear()
    password_field.send_keys(password)
    logging.info("Password entered.")

@retry_on_exception
def click_submit(driver):
    logging.info("Clicking the Submit button.")
    submit_button = WebDriverWait(driver, WAIT_TIMEOUT).until(
        EC.element_to_be_clickable(SELECTORS["submit_button"])
    )
    submit_button.click()
    logging.info("Submit button clicked.")

@retry_on_exception
def verify_error_message_displayed(driver):
    logging.info("Verifying error message is displayed.")
    error_elem = WebDriverWait(driver, WAIT_TIMEOUT).until(
        EC.visibility_of_element_located(SELECTORS["error_message"])
    )
    # The error message is shown by adding a 'show' class, but always present in DOM.
    # Wait until the text is updated and class 'show' is present.
    WebDriverWait(driver, WAIT_TIMEOUT).until(
        lambda d: "show" in error_elem.get_attribute("class")
    )
    logging.info("Error message is displayed.")
    return error_elem

def verify_error_message_text(error_elem, expected_text):
    actual_text = error_elem.text.strip()
    logging.info(f"Verifying error message text. Expected: '{expected_text}', Actual: '{actual_text}'")
    assert actual_text == expected_text, f"Expected error message '{expected_text}', but got '{actual_text}'"
    logging.info("Error message text is correct.")

def main():
    # WebDriver setup as required for Selenium 4.15.2
    service = Service(ChromeDriverManager().install())
    driver = webdriver.Chrome(service=service)
    driver.maximize_window()

    test_passed = False
    try:
        open_login_page(driver)
        enter_username(driver, USERNAME)
        enter_password(driver, PASSWORD)
        click_submit(driver)
        error_elem = verify_error_message_displayed(driver)
        verify_error_message_text(error_elem, EXPECTED_ERROR_TEXT)
        logging.info("TEST PASSED: Error message for invalid password is displayed and correct.")
        test_passed = True
    except AssertionError as ae:
        logging.error(f"TEST FAILED: {ae}")
    except Exception as e:
        logging.error(f"TEST FAILED due to unexpected error: {e}")
    finally:
        driver.quit()
        if not test_passed:
            sys.exit(1)

if __name__ == "__main__":
    main()
```
2025-05-07 12:10:42,959 - INFO - Saved test script: test_scripts/test_20250507_121042_Verify_error_message_for_invalid_password.py
2025-05-07 12:11:02,106 - DEBUG - Raw LLM response generated code: ```python
import logging
import sys
import time

from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import (
    TimeoutException,
    NoSuchElementException,
    ElementClickInterceptedException,
    StaleElementReferenceException,
)
from webdriver_manager.chrome import ChromeDriverManager

# Logging setup
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)

# Test configuration
LOGIN_URL = "https://practicetestautomation.com/practice-test-login/"
USERNAME_SELECTOR = "#username"
PASSWORD_SELECTOR = "#password"
SUBMIT_SELECTOR = "#submit"
ERROR_SELECTOR = "#error"
EXPECTED_ERROR_TEXT = "Your username is invalid!"
TEST_PASSWORD = "Password123"
RETRY_COUNT = 2
WAIT_TIMEOUT = 10

def wait_for_element(driver, by, selector, timeout=WAIT_TIMEOUT):
    return WebDriverWait(driver, timeout).until(
        EC.presence_of_element_located((by, selector))
    )

def wait_for_element_visible(driver, by, selector, timeout=WAIT_TIMEOUT):
    return WebDriverWait(driver, timeout).until(
        EC.visibility_of_element_located((by, selector))
    )

def click_with_retry(driver, by, selector, retries=RETRY_COUNT):
    last_exception = None
    for attempt in range(retries):
        try:
            elem = wait_for_element_visible(driver, by, selector)
            elem.click()
            return
        except (ElementClickInterceptedException, StaleElementReferenceException) as e:
            logging.warning(f"Click attempt {attempt+1} failed: {e}. Retrying...")
            time.sleep(1)
            last_exception = e
    raise last_exception

def run_test():
    # WebDriver initialization (Selenium 4.15.2 best practice)
    service = Service(ChromeDriverManager().install())
    driver = webdriver.Chrome(service=service)
    driver.maximize_window()
    test_passed = False

    try:
        logging.info("Opening login page: %s", LOGIN_URL)
        driver.get(LOGIN_URL)

        # Wait for the Username and Password fields to be present
        username_field = wait_for_element(driver, By.CSS_SELECTOR, USERNAME_SELECTOR)
        password_field = wait_for_element(driver, By.CSS_SELECTOR, PASSWORD_SELECTOR)
        submit_button = wait_for_element(driver, By.CSS_SELECTOR, SUBMIT_SELECTOR)

        # Step 1: Leave Username empty
        logging.info("Leaving Username field empty.")

        # Step 2: Enter password only
        logging.info("Entering password into Password field.")
        password_field.clear()
        password_field.send_keys(TEST_PASSWORD)

        # Step 3: Click Submit button with retry
        logging.info("Clicking Submit button.")
        click_with_retry(driver, By.CSS_SELECTOR, SUBMIT_SELECTOR)

        # Step 4: Wait for error message to be visible
        logging.info("Waiting for error message to be displayed.")
        error_elem = wait_for_element_visible(driver, By.CSS_SELECTOR, ERROR_SELECTOR)

        # Step 5: Verify error message is displayed
        if not error_elem.is_displayed():
            logging.error("Error message element is not displayed.")
            return

        # Step 6: Verify error message text
        actual_error_text = error_elem.text.strip()
        logging.info("Actual error message text: '%s'", actual_error_text)
        if actual_error_text == EXPECTED_ERROR_TEXT:
            logging.info("Test PASSED: Correct error message is displayed.")
            test_passed = True
        else:
            logging.error(
                "Test FAILED: Error message text mismatch. Expected: '%s', Got: '%s'",
                EXPECTED_ERROR_TEXT, actual_error_text
            )

    except TimeoutException as e:
        logging.error("Timeout waiting for element: %s", e)
    except NoSuchElementException as e:
        logging.error("Element not found: %s", e)
    except Exception as e:
        logging.error("Unexpected error: %s", e)
    finally:
        driver.quit()
        if test_passed:
            logging.info("TEST RESULT: PASS")
        else:
            logging.info("TEST RESULT: FAIL")

if __name__ == "__main__":
    run_test()
```
2025-05-07 12:11:02,106 - INFO - Saved test script: test_scripts/test_20250507_121102_Verify_error_message_when_username_is_missing.py
2025-05-07 12:11:36,720 - DEBUG - Raw LLM response generated code: ```python
import logging
import sys
import time

from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import (
    TimeoutException,
    NoSuchElementException,
    ElementClickInterceptedException,
    StaleElementReferenceException,
    WebDriverException,
)
from webdriver_manager.chrome import ChromeDriverManager

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)

LOGIN_URL = "https://practicetestautomation.com/practice-test-login/"
USERNAME = "student"
PASSWORD = ""
EXPECTED_ERROR_TEXT = "Your password is invalid!"

SELECTORS = {
    "username_field": "#username",
    "password_field": "#password",
    "submit_button": "#submit",
    "error_message": "#error"
}

MAX_RETRIES = 2
WAIT_TIMEOUT = 10

def retry_on_exception(func):
    def wrapper(*args, **kwargs):
        last_exception = None
        for attempt in range(1, MAX_RETRIES + 1):
            try:
                return func(*args, **kwargs)
            except (NoSuchElementException, StaleElementReferenceException, WebDriverException) as e:
                logging.warning(f"Attempt {attempt} failed with exception: {e}")
                last_exception = e
                time.sleep(1)
        logging.error(f"All {MAX_RETRIES} attempts failed for {func.__name__}")
        raise last_exception
    return wrapper

@retry_on_exception
def open_login_page(driver):
    logging.info(f"Opening login page: {LOGIN_URL}")
    driver.get(LOGIN_URL)
    WebDriverWait(driver, WAIT_TIMEOUT).until(
        EC.presence_of_element_located((By.CSS_SELECTOR, SELECTORS["username_field"]))
    )
    logging.info("Login page loaded successfully.")

@retry_on_exception
def enter_username(driver, username):
    logging.info(f"Entering username: {username}")
    username_input = WebDriverWait(driver, WAIT_TIMEOUT).until(
        EC.visibility_of_element_located((By.CSS_SELECTOR, SELECTORS["username_field"]))
    )
    username_input.clear()
    username_input.send_keys(username)
    logging.info("Username entered.")

@retry_on_exception
def leave_password_empty(driver):
    logging.info("Ensuring password field is empty.")
    password_input = WebDriverWait(driver, WAIT_TIMEOUT).until(
        EC.visibility_of_element_located((By.CSS_SELECTOR, SELECTORS["password_field"]))
    )
    password_input.clear()
    logging.info("Password field left empty.")

@retry_on_exception
def click_submit(driver):
    logging.info("Clicking the Submit button.")
    submit_btn = WebDriverWait(driver, WAIT_TIMEOUT).until(
        EC.element_to_be_clickable((By.CSS_SELECTOR, SELECTORS["submit_button"]))
    )
    submit_btn.click()
    logging.info("Submit button clicked.")

@retry_on_exception
def verify_error_message_displayed(driver):
    logging.info("Verifying error message is displayed.")
    error_elem = WebDriverWait(driver, WAIT_TIMEOUT).until(
        EC.visibility_of_element_located((By.CSS_SELECTOR, SELECTORS["error_message"]))
    )
    # The error message is only visible when it has the 'show' class
    is_displayed = "show" in error_elem.get_attribute("class")
    if not is_displayed:
        # Wait a bit more in case the class is added with a slight delay
        for _ in range(5):
            time.sleep(0.2)
            if "show" in error_elem.get_attribute("class"):
                is_displayed = True
                break
    assert is_displayed, "Error message is not displayed."
    logging.info("Error message is displayed.")
    return error_elem

def verify_error_message_text(error_elem, expected_text):
    actual_text = error_elem.text.strip()
    logging.info(f"Verifying error message text. Expected: '{expected_text}', Actual: '{actual_text}'")
    assert actual_text == expected_text, f"Error message text mismatch. Expected: '{expected_text}', Actual: '{actual_text}'"
    logging.info("Error message text is correct.")

def main():
    # WebDriver initialization (Selenium 4.15.2 best practice)
    service = Service(ChromeDriverManager().install())
    driver = webdriver.Chrome(service=service)
    driver.maximize_window()
    test_passed = False

    try:
        open_login_page(driver)
        enter_username(driver, USERNAME)
        leave_password_empty(driver)
        click_submit(driver)
        error_elem = verify_error_message_displayed(driver)
        verify_error_message_text(error_elem, EXPECTED_ERROR_TEXT)
        logging.info("TEST PASSED: Error message for missing password is displayed and correct.")
        test_passed = True
    except AssertionError as ae:
        logging.error(f"TEST FAILED: {ae}")
    except TimeoutException as te:
        logging.error(f"TEST FAILED: Timeout occurred - {te}")
    except Exception as e:
        logging.error(f"TEST FAILED: Unexpected error - {e}")
    finally:
        driver.quit()
        if not test_passed:
            sys.exit(1)

if __name__ == "__main__":
    main()
```
2025-05-07 12:11:36,720 - INFO - Saved test script: test_scripts/test_20250507_121136_Verify_error_message_when_password_is_missing.py
2025-05-07 12:11:52,077 - DEBUG - Raw LLM response generated code: ```python
import logging
import sys
import time

from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import (
    TimeoutException,
    NoSuchElementException,
    ElementClickInterceptedException,
    WebDriverException,
)
from webdriver_manager.chrome import ChromeDriverManager

# Logging setup
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)

LOGIN_URL = "https://practicetestautomation.com/practice-test-login/"
HOME_URL = "https://practicetestautomation.com/"
HOME_LINK_XPATH = "//a[normalize-space(text())='Home']"
MAX_RETRIES = 2
WAIT_TIMEOUT = 10

def find_and_click_home(driver):
    """Find and click the 'HOME' link in the header with retries and logging."""
    last_exception = None
    for attempt in range(1, MAX_RETRIES + 1):
        try:
            logging.info(f"Attempt {attempt}: Waiting for 'HOME' link to be clickable in header")
            home_link = WebDriverWait(driver, WAIT_TIMEOUT).until(
                EC.element_to_be_clickable((By.XPATH, HOME_LINK_XPATH))
            )
            logging.info("Clicking 'HOME' link")
            home_link.click()
            return
        except (TimeoutException, NoSuchElementException, ElementClickInterceptedException, WebDriverException) as e:
            logging.warning(f"Attempt {attempt}: Failed to click 'HOME' link: {e}")
            last_exception = e
            time.sleep(1)
    logging.error("All attempts to click 'HOME' link failed")
    raise last_exception

def verify_home_url(driver):
    """Verify that the current URL is the home page URL."""
    try:
        logging.info("Waiting for URL to be the home page")
        WebDriverWait(driver, WAIT_TIMEOUT).until(EC.url_to_be(HOME_URL))
        current_url = driver.current_url
        if current_url == HOME_URL:
            logging.info(f"SUCCESS: Redirected to home page: {current_url}")
            return True
        else:
            logging.error(f"FAIL: URL after clicking HOME is not as expected: {current_url}")
            return False
    except TimeoutException:
        logging.error(f"FAIL: Timed out waiting for URL to be {HOME_URL}. Current URL: {driver.current_url}")
        return False

def main():
    # WebDriver setup (Selenium 4.15.2 pattern)
    service = Service(ChromeDriverManager().install())
    driver = webdriver.Chrome(service=service)
    driver.maximize_window()
    test_passed = False

    try:
        logging.info(f"Opening login page: {LOGIN_URL}")
        driver.get(LOGIN_URL)

        find_and_click_home(driver)
        test_passed = verify_home_url(driver)

    except Exception as e:
        logging.exception(f"Test failed due to unexpected error: {e}")
        test_passed = False
    finally:
        driver.quit()
        if test_passed:
            logging.info("TEST RESULT: PASS - User is redirected to the home page")
        else:
            logging.error("TEST RESULT: FAIL - User is NOT redirected to the home page")

if __name__ == "__main__":
    main()
```
2025-05-07 12:11:52,078 - INFO - Saved test script: test_scripts/test_20250507_121152_Verify_navigation_to_home_page_from_header.py
2025-05-07 12:12:05,697 - DEBUG - Raw LLM response generated code: ```python
import logging
import sys
import time

from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import (
    TimeoutException,
    NoSuchElementException,
    ElementClickInterceptedException,
    WebDriverException,
)
from webdriver_manager.chrome import ChromeDriverManager

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)

LOGIN_URL = "https://practicetestautomation.com/practice-test-login/"
EXPECTED_URL = "https://practicetestautomation.com/practice/"

def find_practice_link(driver, timeout=10):
    """
    Find the 'PRACTICE' link in the header navigation.
    Returns the WebElement if found, else raises TimeoutException.
    """
    wait = WebDriverWait(driver, timeout)
    # The header nav uses <a> with text 'Practice' (case-insensitive)
    # Use XPath for robust selection
    return wait.until(
        EC.element_to_be_clickable(
            (By.XPATH, "//a[normalize-space(text())='Practice']")
        )
    )

def click_with_retry(element, retries=3, delay=1):
    """
    Attempts to click the element, retrying if intercepted.
    """
    for attempt in range(1, retries + 1):
        try:
            element.click()
            return
        except ElementClickInterceptedException as e:
            logging.warning(f"Click intercepted (attempt {attempt}/{retries}): {e}")
            time.sleep(delay)
        except WebDriverException as e:
            logging.error(f"WebDriverException during click: {e}")
            raise
    raise Exception("Failed to click the PRACTICE link after retries.")

def wait_for_url(driver, expected_url, timeout=10):
    """
    Waits until the current URL matches the expected URL.
    """
    wait = WebDriverWait(driver, timeout)
    return wait.until(EC.url_to_be(expected_url))

def main():
    # WebDriver setup for Selenium 4.15.2
    service = Service(ChromeDriverManager().install())
    driver = webdriver.Chrome(service=service)
    driver.maximize_window()
    test_passed = False

    try:
        logging.info("Opening login page: %s", LOGIN_URL)
        driver.get(LOGIN_URL)

        # Wait for the page to load and PRACTICE link to be present
        try:
            logging.info("Locating 'PRACTICE' link in header...")
            practice_link = find_practice_link(driver)
            logging.info("'PRACTICE' link found.")
        except TimeoutException:
            logging.error("Could not find 'PRACTICE' link in header within timeout.")
            return

        # Click the PRACTICE link with retry logic
        try:
            logging.info("Clicking 'PRACTICE' link...")
            click_with_retry(practice_link)
        except Exception as e:
            logging.error(f"Failed to click 'PRACTICE' link: {e}")
            return

        # Wait for navigation to the expected URL
        try:
            logging.info("Waiting for URL to be: %s", EXPECTED_URL)
            wait_for_url(driver, EXPECTED_URL)
            logging.info("Navigation successful. URL is as expected.")
            test_passed = True
        except TimeoutException:
            current_url = driver.current_url
            logging.error(f"Navigation failed. Current URL: {current_url}")
        except Exception as e:
            logging.error(f"Unexpected error during URL validation: {e}")

    finally:
        driver.quit()
        if test_passed:
            logging.info("TEST RESULT: PASS - User is redirected to the practice page.")
        else:
            logging.error("TEST RESULT: FAIL - User is NOT redirected to the practice page.")

if __name__ == "__main__":
    main()
```
2025-05-07 12:12:05,698 - INFO - Saved test script: test_scripts/test_20250507_121205_Verify_navigation_to_practice_page_from_header.py
2025-05-07 12:12:21,261 - DEBUG - Raw LLM response generated code: ```python
import logging
import sys
import time

from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import (
    TimeoutException,
    NoSuchElementException,
    ElementClickInterceptedException,
    StaleElementReferenceException,
    WebDriverException,
)
from webdriver_manager.chrome import ChromeDriverManager

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[logging.StreamHandler(sys.stdout)]
)

LOGIN_URL = "https://practicetestautomation.com/practice-test-login/"
SUCCESS_URL_FRAGMENT = "practicetestautomation.com/logged-in-successfully/"
SELECTORS = {
    "username_field": "#username",
    "password_field": "#password",
    "submit_button": "#submit",
    "error_message": "#error"
}
TEST_DATA = {
    "valid_username": "student",
    "invalid_username": "invaliduser",
    "password": "Password123"
}
MAX_RETRIES = 2
WAIT_TIMEOUT = 10

def retry_on_exception(func):
    def wrapper(*args, **kwargs):
        last_exception = None
        for attempt in range(1, MAX_RETRIES + 1):
            try:
                return func(*args, **kwargs)
            except (StaleElementReferenceException, ElementClickInterceptedException, WebDriverException) as e:
                logging.warning(f"Attempt {attempt} failed for {func.__name__}: {e}")
                last_exception = e
                time.sleep(1)
        logging.error(f"All retries failed for {func.__name__}")
        raise last_exception
    return wrapper

@retry_on_exception
def fill_input(driver, selector, value):
    elem = WebDriverWait(driver, WAIT_TIMEOUT).until(
        EC.presence_of_element_located((By.CSS_SELECTOR, selector))
    )
    elem.clear()
    elem.send_keys(value)
    logging.info(f"Filled input {selector} with value '{value}'")

@retry_on_exception
def click_element(driver, selector):
    elem = WebDriverWait(driver, WAIT_TIMEOUT).until(
        EC.element_to_be_clickable((By.CSS_SELECTOR, selector))
    )
    elem.click()
    logging.info(f"Clicked element {selector}")

def wait_for_error_message(driver, should_be_visible=True):
    try:
        if should_be_visible:
            elem = WebDriverWait(driver, WAIT_TIMEOUT).until(
                EC.visibility_of_element_located((By.CSS_SELECTOR, SELECTORS["error_message"]))
            )
            logging.info("Error message is displayed as expected.")
            return elem.text
        else:
            WebDriverWait(driver, WAIT_TIMEOUT).until_not(
                EC.visibility_of_element_located((By.CSS_SELECTOR, SELECTORS["error_message"]))
            )
            logging.info("Error message is not displayed as expected.")
            return None
    except TimeoutException:
        if should_be_visible:
            logging.error("Expected error message was NOT displayed.")
            raise
        else:
            logging.info("Error message is not visible (as expected).")
            return None

def wait_for_url_contains(driver, fragment):
    try:
        WebDriverWait(driver, WAIT_TIMEOUT).until(
            EC.url_contains(fragment)
        )
        logging.info(f"URL contains expected fragment: {fragment}")
    except TimeoutException:
        logging.error(f"URL did not contain expected fragment: {fragment}")
        raise

def is_error_message_displayed(driver):
    try:
        elem = driver.find_element(By.CSS_SELECTOR, SELECTORS["error_message"])
        return elem.is_displayed() and elem.text.strip() != ""
    except NoSuchElementException:
        return False

def main():
    # WebDriver setup (Selenium 4.15.2)
    service = Service(ChromeDriverManager().install())
    driver = webdriver.Chrome(service=service)
    driver.maximize_window()
    test_passed = True

    try:
        logging.info("Opening login page...")
        driver.get(LOGIN_URL)

        # Step 1: Enter invalid username and valid password
        fill_input(driver, SELECTORS["username_field"], TEST_DATA["invalid_username"])
        fill_input(driver, SELECTORS["password_field"], TEST_DATA["password"])
        click_element(driver, SELECTORS["submit_button"])

        # Step 2: Verify error message is displayed
        error_text = wait_for_error_message(driver, should_be_visible=True)
        if "invalid" not in error_text.lower():
            logging.error(f"Unexpected error message text: {error_text}")
            test_passed = False

        # Step 3: Enter valid username and valid password
        fill_input(driver, SELECTORS["username_field"], TEST_DATA["valid_username"])
        fill_input(driver, SELECTORS["password_field"], TEST_DATA["password"])
        click_element(driver, SELECTORS["submit_button"])

        # Step 4: Verify URL contains success fragment
        wait_for_url_contains(driver, SUCCESS_URL_FRAGMENT)

        # Step 5: Verify error message is not displayed on success page
        # The error message element should not be present or visible after redirect
        # Wait a short time to ensure page is loaded
        time.sleep(1)
        error_present = False
        try:
            error_present = is_error_message_displayed(driver)
        except Exception as e:
            logging.info("Error message element not found on success page (expected).")
            error_present = False

        if error_present:
            logging.error("Error message is still displayed after successful login!")
            test_passed = False
        else:
            logging.info("Error message is cleared after successful login (as expected).")

        if test_passed:
            logging.info("TEST PASSED: Error message is reset after valid login.")
        else:
            logging.error("TEST FAILED: Error message was not reset as expected.")

    except Exception as e:
        logging.exception(f"TEST FAILED due to exception: {e}")
    finally:
        driver.quit()

if __name__ == "__main__":
    main()
```
2025-05-07 12:12:21,262 - INFO - Saved test script: test_scripts/test_20250507_121221_Verify_error_message_reset_after_valid_login.py
2025-05-07 12:13:34,068 - INFO - Navigation tracking completed
